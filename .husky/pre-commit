
# Specify the base branch and app folder
BASE_BRANCH="main"

# Check if a rebase is in progress
if [ -d .git/rebase-apply ] || [ -d .git/rebase-merge ]; then
  echo "Error: Rebasing is not allowed on this branch. Please use merge instead."
  exit 1
fi

# Check if a merge (from base) is in progress
if [ -f .git/MERGE_HEAD ]; then
  # Verify that the merge is coming from the base branch
  BASE_COMMIT=$(git rev-parse origin/$BASE_BRANCH)
  MERGE_COMMIT=$(git rev-parse MERGE_HEAD)

  if [ "$MERGE_COMMIT" != "$BASE_COMMIT" ]; then
    echo "Error: Merge is not from the base branch ($BASE_BRANCH). Please ensure only $BASE_BRANCH is merged into this branch."
    exit 1
  fi

  echo "Merge from base branch ($BASE_BRANCH) detected; skipping further checks."
  exit 0
fi

# Get the current branch name
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# Extract the app folder name (assumes the pattern is 'my-app/*')
APP_FOLDER=$(echo "$CURRENT_BRANCH" | cut -d'/' -f1)

# Fetch the latest changes from the base branch
git fetch origin $BASE_BRANCH

# Check if the app branch is up-to-date with the base branch
if ! git merge-base --is-ancestor origin/$BASE_BRANCH HEAD; then
  echo "Error: Your branch is not up-to-date with $BASE_BRANCH. Please fetch and merge it into this branch first."
  exit 1
fi

# Check if there are any changes in the app-specific folder
APP_CHANGES=$(git diff --name-only HEAD -- $APP_FOLDER)

if [ -n "$APP_CHANGES" ]; then
  echo "Notice: Changes detected in the '$APP_FOLDER' folder:"
  echo "$APP_CHANGES"
  echo "Please review these app-specific changes to ensure they don't unintentionally impact shared code."
  
  # Optionally, prompt to continue or abort
  read -p "Do you still want to proceed with the commit? (y/n) " choice
  if [ "$choice" != "y" ]; then
    echo "Commit aborted."
    exit 1
  fi
fi


# Proceed with the commit if all checks pass
echo "hehe"
# npm test
